#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BidForKids.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="BidForKids")]
	public partial class ProcurementDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuction(Auction instance);
    partial void UpdateAuction(Auction instance);
    partial void DeleteAuction(Auction instance);
    partial void InsertContactProcurement(ContactProcurement instance);
    partial void UpdateContactProcurement(ContactProcurement instance);
    partial void DeleteContactProcurement(ContactProcurement instance);
    partial void InsertProcurement(Procurement instance);
    partial void UpdateProcurement(Procurement instance);
    partial void DeleteProcurement(Procurement instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertGeoLocation(GeoLocation instance);
    partial void UpdateGeoLocation(GeoLocation instance);
    partial void DeleteGeoLocation(GeoLocation instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    #endregion
		
		public ProcurementDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BidForKidsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ProcurementDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProcurementDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProcurementDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProcurementDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Auction> Auctions
		{
			get
			{
				return this.GetTable<Auction>();
			}
		}
		
		public System.Data.Linq.Table<ContactProcurement> ContactProcurements
		{
			get
			{
				return this.GetTable<ContactProcurement>();
			}
		}
		
		public System.Data.Linq.Table<Procurement> Procurements
		{
			get
			{
				return this.GetTable<Procurement>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<GeoLocation> GeoLocations
		{
			get
			{
				return this.GetTable<GeoLocation>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
	}
	
	[Table(Name="dbo.Auction")]
	public partial class Auction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Auction_ID;
		
		private int _Year;
		
		private string _Name;
		
		private EntitySet<ContactProcurement> _ContactProcurements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuction_IDChanging(int value);
    partial void OnAuction_IDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Auction()
		{
			this._ContactProcurements = new EntitySet<ContactProcurement>(new Action<ContactProcurement>(this.attach_ContactProcurements), new Action<ContactProcurement>(this.detach_ContactProcurements));
			OnCreated();
		}
		
		[Column(Storage="_Auction_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Auction_ID
		{
			get
			{
				return this._Auction_ID;
			}
			set
			{
				if ((this._Auction_ID != value))
				{
					this.OnAuction_IDChanging(value);
					this.SendPropertyChanging();
					this._Auction_ID = value;
					this.SendPropertyChanged("Auction_ID");
					this.OnAuction_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Auction_ContactProcurement", Storage="_ContactProcurements", ThisKey="Auction_ID", OtherKey="Auction_ID")]
		public EntitySet<ContactProcurement> ContactProcurements
		{
			get
			{
				return this._ContactProcurements;
			}
			set
			{
				this._ContactProcurements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactProcurements(ContactProcurement entity)
		{
			this.SendPropertyChanging();
			entity.Auction = this;
		}
		
		private void detach_ContactProcurements(ContactProcurement entity)
		{
			this.SendPropertyChanging();
			entity.Auction = null;
		}
	}
	
	[Table(Name="dbo.ContactProcurement")]
	public partial class ContactProcurement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactProcurement_ID;
		
		private int _Contact_ID;
		
		private int _Procurement_ID;
		
		private int _Auction_ID;
		
		private EntityRef<Auction> _Auction;
		
		private EntityRef<Procurement> _Procurement;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactProcurement_IDChanging(int value);
    partial void OnContactProcurement_IDChanged();
    partial void OnContact_IDChanging(int value);
    partial void OnContact_IDChanged();
    partial void OnProcurement_IDChanging(int value);
    partial void OnProcurement_IDChanged();
    partial void OnAuction_IDChanging(int value);
    partial void OnAuction_IDChanged();
    #endregion
		
		public ContactProcurement()
		{
			this._Auction = default(EntityRef<Auction>);
			this._Procurement = default(EntityRef<Procurement>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[Column(Storage="_ContactProcurement_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactProcurement_ID
		{
			get
			{
				return this._ContactProcurement_ID;
			}
			set
			{
				if ((this._ContactProcurement_ID != value))
				{
					this.OnContactProcurement_IDChanging(value);
					this.SendPropertyChanging();
					this._ContactProcurement_ID = value;
					this.SendPropertyChanged("ContactProcurement_ID");
					this.OnContactProcurement_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Contact_ID", DbType="Int NOT NULL")]
		public int Contact_ID
		{
			get
			{
				return this._Contact_ID;
			}
			set
			{
				if ((this._Contact_ID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContact_IDChanging(value);
					this.SendPropertyChanging();
					this._Contact_ID = value;
					this.SendPropertyChanged("Contact_ID");
					this.OnContact_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Procurement_ID", DbType="Int NOT NULL")]
		public int Procurement_ID
		{
			get
			{
				return this._Procurement_ID;
			}
			set
			{
				if ((this._Procurement_ID != value))
				{
					if (this._Procurement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcurement_IDChanging(value);
					this.SendPropertyChanging();
					this._Procurement_ID = value;
					this.SendPropertyChanged("Procurement_ID");
					this.OnProcurement_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Auction_ID", DbType="Int NOT NULL")]
		public int Auction_ID
		{
			get
			{
				return this._Auction_ID;
			}
			set
			{
				if ((this._Auction_ID != value))
				{
					if (this._Auction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuction_IDChanging(value);
					this.SendPropertyChanging();
					this._Auction_ID = value;
					this.SendPropertyChanged("Auction_ID");
					this.OnAuction_IDChanged();
				}
			}
		}
		
		[Association(Name="Auction_ContactProcurement", Storage="_Auction", ThisKey="Auction_ID", OtherKey="Auction_ID", IsForeignKey=true)]
		public Auction Auction
		{
			get
			{
				return this._Auction.Entity;
			}
			set
			{
				Auction previousValue = this._Auction.Entity;
				if (((previousValue != value) 
							|| (this._Auction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Auction.Entity = null;
						previousValue.ContactProcurements.Remove(this);
					}
					this._Auction.Entity = value;
					if ((value != null))
					{
						value.ContactProcurements.Add(this);
						this._Auction_ID = value.Auction_ID;
					}
					else
					{
						this._Auction_ID = default(int);
					}
					this.SendPropertyChanged("Auction");
				}
			}
		}
		
		[Association(Name="Procurement_ContactProcurement", Storage="_Procurement", ThisKey="Procurement_ID", OtherKey="Procurement_ID", IsForeignKey=true)]
		public Procurement Procurement
		{
			get
			{
				return this._Procurement.Entity;
			}
			set
			{
				Procurement previousValue = this._Procurement.Entity;
				if (((previousValue != value) 
							|| (this._Procurement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Procurement.Entity = null;
						previousValue.ContactProcurement = null;
					}
					this._Procurement.Entity = value;
					if ((value != null))
					{
						value.ContactProcurement = this;
						this._Procurement_ID = value.Procurement_ID;
					}
					else
					{
						this._Procurement_ID = default(int);
					}
					this.SendPropertyChanged("Procurement");
				}
			}
		}
		
		[Association(Name="Contact_ContactProcurement", Storage="_Contact", ThisKey="Contact_ID", OtherKey="Contact_ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.ContactProcurements.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.ContactProcurements.Add(this);
						this._Contact_ID = value.Contact_ID;
					}
					else
					{
						this._Contact_ID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Procurement")]
	public partial class Procurement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Procurement_ID;
		
		private string _Description;
		
		private System.Nullable<double> _Quantity;
		
		private System.Nullable<decimal> _PerItemValue;
		
		private string _Notes;
		
		private string _CatalogNumber;
		
		private string _AuctionNumber;
		
		private string _ItemNumber;
		
		private System.Nullable<decimal> _EstimatedValue;
		
		private System.Nullable<decimal> _SoldFor;
		
		private System.Nullable<int> _GeoLocation_ID;
		
		private System.Nullable<int> _Category_ID;
		
		private EntityRef<ContactProcurement> _ContactProcurements;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<GeoLocation> _GeoLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcurement_IDChanging(int value);
    partial void OnProcurement_IDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuantityChanging(System.Nullable<double> value);
    partial void OnQuantityChanged();
    partial void OnPerItemValueChanging(System.Nullable<decimal> value);
    partial void OnPerItemValueChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCatalogNumberChanging(string value);
    partial void OnCatalogNumberChanged();
    partial void OnAuctionNumberChanging(string value);
    partial void OnAuctionNumberChanged();
    partial void OnItemNumberChanging(string value);
    partial void OnItemNumberChanged();
    partial void OnEstimatedValueChanging(System.Nullable<decimal> value);
    partial void OnEstimatedValueChanged();
    partial void OnSoldForChanging(System.Nullable<decimal> value);
    partial void OnSoldForChanged();
    partial void OnGeoLocation_IDChanging(System.Nullable<int> value);
    partial void OnGeoLocation_IDChanged();
    partial void OnCategory_IDChanging(System.Nullable<int> value);
    partial void OnCategory_IDChanged();
    #endregion
		
		public Procurement()
		{
			this._ContactProcurements = default(EntityRef<ContactProcurement>);
			this._Category = default(EntityRef<Category>);
			this._GeoLocation = default(EntityRef<GeoLocation>);
			OnCreated();
		}
		
		[Column(Storage="_Procurement_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Procurement_ID
		{
			get
			{
				return this._Procurement_ID;
			}
			set
			{
				if ((this._Procurement_ID != value))
				{
					this.OnProcurement_IDChanging(value);
					this.SendPropertyChanging();
					this._Procurement_ID = value;
					this.SendPropertyChanged("Procurement_ID");
					this.OnProcurement_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Float")]
		public System.Nullable<double> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_PerItemValue", DbType="Money")]
		public System.Nullable<decimal> PerItemValue
		{
			get
			{
				return this._PerItemValue;
			}
			set
			{
				if ((this._PerItemValue != value))
				{
					this.OnPerItemValueChanging(value);
					this.SendPropertyChanging();
					this._PerItemValue = value;
					this.SendPropertyChanged("PerItemValue");
					this.OnPerItemValueChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_CatalogNumber", DbType="VarChar(20)")]
		public string CatalogNumber
		{
			get
			{
				return this._CatalogNumber;
			}
			set
			{
				if ((this._CatalogNumber != value))
				{
					this.OnCatalogNumberChanging(value);
					this.SendPropertyChanging();
					this._CatalogNumber = value;
					this.SendPropertyChanged("CatalogNumber");
					this.OnCatalogNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AuctionNumber", DbType="VarChar(20)")]
		public string AuctionNumber
		{
			get
			{
				return this._AuctionNumber;
			}
			set
			{
				if ((this._AuctionNumber != value))
				{
					this.OnAuctionNumberChanging(value);
					this.SendPropertyChanging();
					this._AuctionNumber = value;
					this.SendPropertyChanged("AuctionNumber");
					this.OnAuctionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNumber", DbType="VarChar(20)")]
		public string ItemNumber
		{
			get
			{
				return this._ItemNumber;
			}
			set
			{
				if ((this._ItemNumber != value))
				{
					this.OnItemNumberChanging(value);
					this.SendPropertyChanging();
					this._ItemNumber = value;
					this.SendPropertyChanged("ItemNumber");
					this.OnItemNumberChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedValue", DbType="Money")]
		public System.Nullable<decimal> EstimatedValue
		{
			get
			{
				return this._EstimatedValue;
			}
			set
			{
				if ((this._EstimatedValue != value))
				{
					this.OnEstimatedValueChanging(value);
					this.SendPropertyChanging();
					this._EstimatedValue = value;
					this.SendPropertyChanged("EstimatedValue");
					this.OnEstimatedValueChanged();
				}
			}
		}
		
		[Column(Storage="_SoldFor", DbType="Money")]
		public System.Nullable<decimal> SoldFor
		{
			get
			{
				return this._SoldFor;
			}
			set
			{
				if ((this._SoldFor != value))
				{
					this.OnSoldForChanging(value);
					this.SendPropertyChanging();
					this._SoldFor = value;
					this.SendPropertyChanged("SoldFor");
					this.OnSoldForChanged();
				}
			}
		}
		
		[Column(Storage="_GeoLocation_ID", DbType="Int")]
		public System.Nullable<int> GeoLocation_ID
		{
			get
			{
				return this._GeoLocation_ID;
			}
			set
			{
				if ((this._GeoLocation_ID != value))
				{
					if (this._GeoLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeoLocation_IDChanging(value);
					this.SendPropertyChanging();
					this._GeoLocation_ID = value;
					this.SendPropertyChanged("GeoLocation_ID");
					this.OnGeoLocation_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Category_ID", DbType="Int")]
		public System.Nullable<int> Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[Association(Name="Procurement_ContactProcurement", Storage="_ContactProcurements", ThisKey="Procurement_ID", OtherKey="Procurement_ID", IsUnique=true, IsForeignKey=false)]
		public ContactProcurement ContactProcurement
		{
			get
			{
				return this._ContactProcurements.Entity;
			}
			set
			{
				ContactProcurement previousValue = this._ContactProcurements.Entity;
				if (((previousValue != value) 
							|| (this._ContactProcurements.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactProcurements.Entity = null;
						previousValue.Procurement = null;
					}
					this._ContactProcurements.Entity = value;
					if ((value != null))
					{
						value.Procurement = this;
					}
					this.SendPropertyChanged("ContactProcurement");
				}
			}
		}
		
		[Association(Name="Category_Procurement", Storage="_Category", ThisKey="Category_ID", OtherKey="Category_ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Procurements.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Procurements.Add(this);
						this._Category_ID = value.Category_ID;
					}
					else
					{
						this._Category_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="GeoLocation_Procurement", Storage="_GeoLocation", ThisKey="GeoLocation_ID", OtherKey="GeoLocation_ID", IsForeignKey=true)]
		public GeoLocation GeoLocation
		{
			get
			{
				return this._GeoLocation.Entity;
			}
			set
			{
				GeoLocation previousValue = this._GeoLocation.Entity;
				if (((previousValue != value) 
							|| (this._GeoLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoLocation.Entity = null;
						previousValue.Procurements.Remove(this);
					}
					this._GeoLocation.Entity = value;
					if ((value != null))
					{
						value.Procurements.Add(this);
						this._GeoLocation_ID = value.GeoLocation_ID;
					}
					else
					{
						this._GeoLocation_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GeoLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Category_ID;
		
		private string _CategoryName;
		
		private string _Description;
		
		private EntitySet<Procurement> _Procurements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategory_IDChanging(int value);
    partial void OnCategory_IDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Category()
		{
			this._Procurements = new EntitySet<Procurement>(new Action<Procurement>(this.attach_Procurements), new Action<Procurement>(this.detach_Procurements));
			OnCreated();
		}
		
		[Column(Storage="_Category_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Category_Procurement", Storage="_Procurements", ThisKey="Category_ID", OtherKey="Category_ID")]
		public EntitySet<Procurement> Procurements
		{
			get
			{
				return this._Procurements;
			}
			set
			{
				this._Procurements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Procurements(Procurement entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Procurements(Procurement entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.GeoLocation")]
	public partial class GeoLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GeoLocation_ID;
		
		private string _GeoLocationName;
		
		private string _Description;
		
		private EntitySet<Procurement> _Procurements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGeoLocation_IDChanging(int value);
    partial void OnGeoLocation_IDChanged();
    partial void OnGeoLocationNameChanging(string value);
    partial void OnGeoLocationNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public GeoLocation()
		{
			this._Procurements = new EntitySet<Procurement>(new Action<Procurement>(this.attach_Procurements), new Action<Procurement>(this.detach_Procurements));
			OnCreated();
		}
		
		[Column(Storage="_GeoLocation_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GeoLocation_ID
		{
			get
			{
				return this._GeoLocation_ID;
			}
			set
			{
				if ((this._GeoLocation_ID != value))
				{
					this.OnGeoLocation_IDChanging(value);
					this.SendPropertyChanging();
					this._GeoLocation_ID = value;
					this.SendPropertyChanged("GeoLocation_ID");
					this.OnGeoLocation_IDChanged();
				}
			}
		}
		
		[Column(Storage="_GeoLocationName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string GeoLocationName
		{
			get
			{
				return this._GeoLocationName;
			}
			set
			{
				if ((this._GeoLocationName != value))
				{
					this.OnGeoLocationNameChanging(value);
					this.SendPropertyChanging();
					this._GeoLocationName = value;
					this.SendPropertyChanged("GeoLocationName");
					this.OnGeoLocationNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="GeoLocation_Procurement", Storage="_Procurements", ThisKey="GeoLocation_ID", OtherKey="GeoLocation_ID")]
		public EntitySet<Procurement> Procurements
		{
			get
			{
				return this._Procurements;
			}
			set
			{
				this._Procurements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Procurements(Procurement entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = this;
		}
		
		private void detach_Procurements(Procurement entity)
		{
			this.SendPropertyChanging();
			entity.GeoLocation = null;
		}
	}
	
	[Table(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Contact_ID;
		
		private string _BusinessName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _Phone1;
		
		private string _Phone1Desc;
		
		private string _Phone2;
		
		private string _Phone2Desc;
		
		private string _Phone3;
		
		private string _Phone3Desc;
		
		private string _Notes;
		
		private string _Website;
		
		private string _Email;
		
		private EntitySet<ContactProcurement> _ContactProcurements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContact_IDChanging(int value);
    partial void OnContact_IDChanged();
    partial void OnBusinessNameChanging(string value);
    partial void OnBusinessNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone1DescChanging(string value);
    partial void OnPhone1DescChanged();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnPhone2DescChanging(string value);
    partial void OnPhone2DescChanged();
    partial void OnPhone3Changing(string value);
    partial void OnPhone3Changed();
    partial void OnPhone3DescChanging(string value);
    partial void OnPhone3DescChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Contact()
		{
			this._ContactProcurements = new EntitySet<ContactProcurement>(new Action<ContactProcurement>(this.attach_ContactProcurements), new Action<ContactProcurement>(this.detach_ContactProcurements));
			OnCreated();
		}
		
		[Column(Storage="_Contact_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Contact_ID
		{
			get
			{
				return this._Contact_ID;
			}
			set
			{
				if ((this._Contact_ID != value))
				{
					this.OnContact_IDChanging(value);
					this.SendPropertyChanging();
					this._Contact_ID = value;
					this.SendPropertyChanged("Contact_ID");
					this.OnContact_IDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessName", DbType="VarChar(255)")]
		public string BusinessName
		{
			get
			{
				return this._BusinessName;
			}
			set
			{
				if ((this._BusinessName != value))
				{
					this.OnBusinessNameChanging(value);
					this.SendPropertyChanging();
					this._BusinessName = value;
					this.SendPropertyChanged("BusinessName");
					this.OnBusinessNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(2)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="VarChar(10)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phone1", DbType="VarChar(20)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[Column(Storage="_Phone1Desc", DbType="VarChar(10)")]
		public string Phone1Desc
		{
			get
			{
				return this._Phone1Desc;
			}
			set
			{
				if ((this._Phone1Desc != value))
				{
					this.OnPhone1DescChanging(value);
					this.SendPropertyChanging();
					this._Phone1Desc = value;
					this.SendPropertyChanged("Phone1Desc");
					this.OnPhone1DescChanged();
				}
			}
		}
		
		[Column(Storage="_Phone2", DbType="VarChar(20)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[Column(Storage="_Phone2Desc", DbType="VarChar(10)")]
		public string Phone2Desc
		{
			get
			{
				return this._Phone2Desc;
			}
			set
			{
				if ((this._Phone2Desc != value))
				{
					this.OnPhone2DescChanging(value);
					this.SendPropertyChanging();
					this._Phone2Desc = value;
					this.SendPropertyChanged("Phone2Desc");
					this.OnPhone2DescChanged();
				}
			}
		}
		
		[Column(Storage="_Phone3", DbType="VarChar(20)")]
		public string Phone3
		{
			get
			{
				return this._Phone3;
			}
			set
			{
				if ((this._Phone3 != value))
				{
					this.OnPhone3Changing(value);
					this.SendPropertyChanging();
					this._Phone3 = value;
					this.SendPropertyChanged("Phone3");
					this.OnPhone3Changed();
				}
			}
		}
		
		[Column(Storage="_Phone3Desc", DbType="VarChar(10)")]
		public string Phone3Desc
		{
			get
			{
				return this._Phone3Desc;
			}
			set
			{
				if ((this._Phone3Desc != value))
				{
					this.OnPhone3DescChanging(value);
					this.SendPropertyChanging();
					this._Phone3Desc = value;
					this.SendPropertyChanged("Phone3Desc");
					this.OnPhone3DescChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_Website", DbType="VarChar(1024)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="Contact_ContactProcurement", Storage="_ContactProcurements", ThisKey="Contact_ID", OtherKey="Contact_ID")]
		public EntitySet<ContactProcurement> ContactProcurements
		{
			get
			{
				return this._ContactProcurements;
			}
			set
			{
				this._ContactProcurements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactProcurements(ContactProcurement entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_ContactProcurements(ContactProcurement entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
}
#pragma warning restore 1591
